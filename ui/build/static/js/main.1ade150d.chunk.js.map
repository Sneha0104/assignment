{"version":3,"sources":["logo.svg","Views/cardTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["BasicCard","props","Card","sx","minWidth","style","backgroundColor","CardContent","Typography","variant","component","firstName","lastName","color","email","mb","phoneNumber","closestDistance","moment","violationTime","format","violationTimes","toString","App","React","useState","droneData","setDroneData","violatorData","setViolaterData","useEffect","interval","setInterval","axios","get","then","response","resData","data","drone","clearInterval","map","distance","Math","sqrt","abs","positionX","positionY","pilotInformation","serialNumber","filter","violator","Date","now","pilotData","undefined","find","id","console","log","prevData","v","concat","catch","error","className","Box","flexGrow","Grid","container","spacing","idx","item","xs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1ade150d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport moment from \"moment\";\n\n\n\nexport default function BasicCard(props) {\n\n  return (\n    <Card sx={{ minWidth: 275 }} style={{backgroundColor: \"#edf5e1\"}}>\n      <CardContent  >\n        <Typography variant=\"h5\" component=\"div\">\n          {props.firstName} {props.lastName}\n        </Typography>\n        <Typography color=\"text.secondary\">\n          {props.email}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {props.phoneNumber}\n        </Typography>\n        <Typography variant=\"body2\">\n          Closest Distance: {props.closestDistance}\n        </Typography>\n        <Typography variant=\"body2\">\n          Violation Date: {moment(props.violationTime).format(\"L\")}\n        </Typography>\n        <Typography variant=\"body2\">\n          Violation Time: {moment(props.violationTime).format(\"LTS\")}\n        </Typography>\n        <Typography variant=\"body2\">\n          No of Violations: {props.violationTimes.toString()}\n        </Typography>\n      </CardContent>\n\n    </Card>\n  );\n}\n\n// <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n//           {props.firstName}\n//         </Typography>","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from 'axios';\nimport BasicCard from \"./Views/cardTemplate\";\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nfunction App() {\n  const [droneData, setDroneData] = React.useState([]);\n  const [violatorData, setViolaterData] = React.useState([]);\n\n  //get drones data every 2 minutes\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      axios.get('http://localhost:3001/drones')\n        .then(response => {\n          const resData = response.data.drone;\n          setDroneData([...resData]);\n        });\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  //whenever new drone is detected, check for violation\n  React.useEffect(() => {\n    if (droneData) {\n      droneData.map((drone) => {\n        const distance = Math.sqrt(Math.abs(drone.positionX - 250000) ** 2 + Math.abs(drone.positionY - 250000) ** 2);\n        //console.log(distance);\n        //min distance = 500000/500 * 100 = 100000\n        //console.log(\"Distance= \",distance);\n        if (distance < 100000) {\n          //console.log(\"distancee= \",distance,\"serial= \",drone.serialNumber);\n          pilotInformation(drone.serialNumber, distance);\n        }\n      })\n    }\n  }, [droneData]);\n\n  //remove violator data  after 10 minutes (600000 milliseconds)\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setViolaterData(violatorData.filter(\n        (violator) => {\n          const timeNow = Date.now();\n          return timeNow - violator.violationTime < 600000\n        }\n      ))\n    }, 5000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [violatorData]);\n\n\n  const pilotInformation = (serialNumber, distance) => {\n    //console.log(serialNumber,distance);\n    axios.get(`http://localhost:3001/pilots/${serialNumber}`)\n      .then(response => {\n        const pilotData = response.data;\n        //console.log(\"got a pilot\",pilotData.firstName);\n        const violator = {\n          firstName: pilotData.firstName,\n          lastName: pilotData.lastName,\n          email: pilotData.email,\n          phoneNumber: pilotData.phoneNumber,\n          closestDistance: distance,\n          violationTime: Date.now(),\n          violationTimes:1,\n          serialNumber: serialNumber,\n        };\n        if(violatorData.find((id)=>id.serialNumber === serialNumber)!=undefined)\n        {\n          console.log(\"found\");\n          const prevData = violatorData.find((id)=>id.serialNumber === serialNumber);\n          if(prevData!=undefined)\n          violator.violationTimes = prevData.violationTimes + 1;\n          if(prevData!=undefined && violator.closestDistance>prevData.closestDistance)\n          {\n          //new time, old distance\n          violator.closestDistance = prevData.closestDistance;\n          }\n          //if not => new time, new distance\n            setViolaterData(violatorData.map((v)=>{\n\n              if(v.serialNumber == violator.serialNumber)\n              {\n                return violator;\n              }\n              else\n              {\n                console.log(\"return\");\n                return v;\n              }\n            }));\n          \n         \n        }\n        else\n       {          console.log(\"not-found\");\n \n        setViolaterData(violatorData.concat([violator]));}\n        //console.log(\"violer2=\",violatorData);\n\n      })\n      .catch(error => {\n        //console.log(error);\n        return error;\n      });\n    //console.log(\"data = \", violatorData);\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"Header\">\n        <h1>Violators Information</h1>\n        </header>\n        <div className=\"Body\">\n        <Box  sx={{ flexGrow: 1 }}>\n          <Grid container spacing={5}>\n            {\n\n              violatorData.map((data, idx) => (\n                <Grid item xs = {3}>\n                  <BasicCard\n                    key={idx}\n                    firstName={data.firstName}\n                    lastName={data.lastName}\n                    email={data.email}\n                    phoneNumber={data.phoneNumber}\n                    closestDistance={data.closestDistance}\n                    violationTime={data.violationTime}\n                    violationTimes = {data.violationTimes}\n                  />\n                </Grid>\n              ))\n            }\n          </Grid>\n        </Box>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}